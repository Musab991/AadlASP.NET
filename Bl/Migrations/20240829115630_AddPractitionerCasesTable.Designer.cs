// <auto-generated />
using System;
using BusinessLib.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessLib.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240829115630_AddPractitionerCasesTable")]
    partial class AddPractitionerCasesTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domains.Models.TbCaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PractitionerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TbCaseTypes", (string)null);
                });

            modelBuilder.Entity("Domains.Models.TbCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TbCounrties", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 51,
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 1,
                            Name = "United States"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 6,
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 8,
                            Name = "France"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Russia"
                        },
                        new
                        {
                            Id = 12,
                            Name = "China"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 14,
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = 15,
                            Name = "India"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 17,
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = 18,
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 23,
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Iran"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Israel"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Chile"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Peru"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Cuba"
                        });
                });

            modelBuilder.Entity("Domains.Models.TbPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TbCountryId")
                        .HasColumnType("int");

                    b.Property<string>("ThirdName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdateByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdateDate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TbCountryId");

                    b.ToTable("TbPeople");
                });

            modelBuilder.Entity("Domains.Models.TbPractitioner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("PractitionerSpecId")
                        .HasColumnType("int");

                    b.Property<string>("PractitionerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("TbPractitioners", (string)null);
                });

            modelBuilder.Entity("Domains.Models.TbPractitionerCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("PractitionerId")
                        .HasColumnType("int");

                    b.Property<byte>("PractitionerType")
                        .HasColumnType("tinyint");

                    b.Property<int>("TbPractitionerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PractitionerId");

                    b.HasIndex("TbPractitionerId");

                    b.ToTable("TbPractitionerCase");
                });

            modelBuilder.Entity("Domains.Models.TbPractitionerSpec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte?>("ExpertSubscriptionType")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ExpertSubscriptionWay")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("JudgerSubscriptionType")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("JudgerSubscriptionWay")
                        .HasColumnType("tinyint");

                    b.Property<int>("PractitionerId")
                        .HasColumnType("int");

                    b.Property<string>("RegulatorMembershipNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("RegulatorSubscriptionType")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("RegulatorSubscriptionWay")
                        .HasColumnType("tinyint");

                    b.Property<string>("ShariaLicenseNubmer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("ShariaSubscriptionType")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ShariaSubscriptionWay")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("PractitionerId")
                        .IsUnique();

                    b.ToTable("TbPractitionerSpec");
                });

            modelBuilder.Entity("Domains.Models.TbPerson", b =>
                {
                    b.HasOne("Domains.Models.TbCountry", "TbCountry")
                        .WithMany("TbPeople")
                        .HasForeignKey("TbCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TbCountry");
                });

            modelBuilder.Entity("Domains.Models.TbPractitioner", b =>
                {
                    b.HasOne("Domains.Models.TbPerson", "TbPerson")
                        .WithOne()
                        .HasForeignKey("Domains.Models.TbPractitioner", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TbPerson");
                });

            modelBuilder.Entity("Domains.Models.TbPractitionerCase", b =>
                {
                    b.HasOne("Domains.Models.TbCaseType", "TbCaseType")
                        .WithMany()
                        .HasForeignKey("PractitionerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domains.Models.TbPractitioner", "TbPractitioner")
                        .WithMany()
                        .HasForeignKey("TbPractitionerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TbCaseType");

                    b.Navigation("TbPractitioner");
                });

            modelBuilder.Entity("Domains.Models.TbPractitionerSpec", b =>
                {
                    b.HasOne("Domains.Models.TbPractitioner", null)
                        .WithOne("TbPractitionerSpec")
                        .HasForeignKey("Domains.Models.TbPractitionerSpec", "PractitionerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domains.Models.TbCountry", b =>
                {
                    b.Navigation("TbPeople");
                });

            modelBuilder.Entity("Domains.Models.TbPractitioner", b =>
                {
                    b.Navigation("TbPractitionerSpec")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
